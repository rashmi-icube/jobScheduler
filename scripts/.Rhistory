# query to get Mentorship metric score for second degree people
query=paste("SELECT t1.emp_id,t1.metric_value as Score  FROM individual_metric_value as t1 where t1.metric_id=2 and t1.emp_id in (",paste(vertexlist$emp_id,collapse = ","),")
and t1.calc_time=(select max(t2.calc_time) from  individual_metric_value as t2
where t2.metric_id=t1.metric_id and t2.emp_id=t1.emp_id);",sep="")
# run query
res <- dbSendQuery(mydb,query)
# op with mentorship score
op<- fetch(res,-1)
# remove employee on whom init created
op=op[op$emp_id!=emp_id,]
}
# Retention Sentiment
if(init_type_id==3 || init_type_id==5){
# query to get people from same cube
query=paste("call getListColleague('",emp_id,"')",sep="")
# run query
res <- dbSendQuery(mydb,query)
# fetch reslt
emoloyeeCube<- fetch(res,-1)
# query to get edgelist for people in cube and mentor relatin
queryedge = paste("match (a:Employee),(b:Employee) where
a.emp_id in [",paste(emoloyeeCube$emp_id,collapse=","),"] and
b.emp_id in [",paste(emoloyeeCube$emp_id,collapse=","),"]
with a,b
match a-[r:mentor]->b
return a.emp_id as from ,b.emp_id as to,r.weight as weight ",sep="")
# run query
edgelist = cypher(graph, queryedge)
# create graph fro cube and mentor rel
g <- graph.data.frame(edgelist, directed=TRUE, vertices=emoloyeeCube$emp_id)
# calculate instrength
op=data.frame(strength(g,mode = "in"))
# rename column
names(op)="Score"
# add column emp_id
op$emp_id=row.names(op)
}
# influence
if(init_type_id==4){
#query to get people upto 2nd degree conntn and all relation
querynode = paste("match (a:Employee {emp_id:",emp_id,"})-[*1..2]-(b:Employee)
return distinct(b.emp_id) as emp_id",sep="")
#run query
vertexlist=cypher(graph, querynode)
# query to get inflence score form sql for people upto 2nd degree conntn
query=paste("SELECT t1.emp_id,t1.metric_value as Score  FROM individual_metric_value as t1 where t1.metric_id=4 and t1.emp_id in (",paste(vertexlist$emp_id,collapse = ","),")
and t1.calc_time=(select max(t2.calc_time) from  individual_metric_value as t2
where t2.metric_id=t1.metric_id and t2.emp_id=t1.emp_id);",sep="")
# run query
res <- dbSendQuery(mydb,query)
# fetch result
op<- fetch(res,-1)
}
# disconnect db
dbDisconnect(mydb)
# rempve employee on whom initiative created
op=op[op$emp_id!=emp_id,]
# rank score
op$Rank=rank(-op$Score,ties.method= "random")
# flag high medium low
op$flag=ifelse(op$Rank<=nrow(op)/3,"High",ifelse(op$Rank<=nrow(op)*2/3,"Medium","Low"))
op$emp_id=as.integer(op$emp_id)
op$Rank=as.integer(op$Rank)
# return op
return(op)
}
mysqlusername='root'
mysqlpasswod="root"
mysqldbname='owen'
mysqlhost="127.0.0.1"
mysqlport=3306
neopath="http://localhost:7474/db/data/"
neousername=""
neopassword=""
z=IndividualSmartList(1,3)
library(RNeo4j)
library(igraph)
library(moments)
library(RMySQL)
library(reshape2)
z=IndividualSmartList(1,3)
View(z)
class(z$Score)
SmartListResponse=function(emp_id,rel_id){
mydb = dbConnect(MySQL(), user=mysqlusername, password=mysqlpasswod, dbname=mysqldbname, host=mysqlhost, port=mysqlport)
query=paste("select rel_name from relationship_master where rel_id=",rel_id,";",sep="")
res <- dbSendQuery(mydb,query)
relname<- fetch(res,-1)
dbDisconnect(mydb)
relname=relname[1,1]
graph = startGraph(neopath, username=neousername, password=neopassword)
querynode = paste("match (a:Employee {emp_id:",emp_id,"})-[r:",relname,"]->(b:Employee)
return b.emp_id as emp_id,r.weight as weight"
,sep="")
FirstConn=cypher(graph, querynode)
FirstConn$Rank=rank(-FirstConn$weight,ties.method = "random")
querynode = paste("match (a:Employee {emp_id:",emp_id,"})-[r:",relname,"]->(b:Employee)-[:",relname,"]->(c:Employee)
return b.emp_id,c.emp_id,r.weight"
,sep="")
SecondConn=cypher(graph, querynode)
SecondConn=aggregate(SecondConn$r.weight,by=list(emp_id=SecondConn$c.emp_id),max)
names(SecondConn)[2]="weight"
SecondConn=SecondConn[SecondConn$emp_id!=emp_id,]
SecondConn=SecondConn[!(SecondConn$emp_id %in% FirstConn$emp_id),]
SecondConn$Rank=rank(-SecondConn$weight,ties.method = "random")
op=FirstConn[FirstConn$Rank<=5,]
nextfive=SecondConn[SecondConn$Rank<=5,]
nextfive$Rank=nextfive$Rank+nrow(op)
op=rbind(op,nextfive)
nextfive=FirstConn[FirstConn$Rank>5,]
nextfive$Rank=nextfive$Rank+5
op=rbind(op,nextfive)
nextfive=SecondConn[SecondConn$Rank>5,]
nextfive$Rank=nextfive$Rank+nrow(op)-5
op=rbind(op,nextfive)
op=op[,c("emp_id","Rank")]
mydb = dbConnect(MySQL(), user=mysqlusername, password=mysqlpasswod, dbname=mysqldbname, host=mysqlhost, port=mysqlport)
query=paste("call owen.getListColleague('",emp_id,"')",sep="")
res <- dbSendQuery(mydb,query)
employeeCube<- fetch(res,-1)
dbDisconnect(mydb)
employeeCube=data.frame(employeeCube[!(employeeCube$emp_id %in% emp_id),])
names(employeeCube)[1]="emp_id"
employeeCube=data.frame(employeeCube[!(employeeCube$emp_id %in% op$emp_id),])
names(employeeCube)="emp_id"
if(nrow(employeeCube)>0){
employeeCube$Rank=(nrow(op)+1):(nrow(employeeCube)+nrow(op))
op=rbind(op,employeeCube)
}
op$emp_id=as.integer(op$emp_id)
op$Rank=as.integer(op$Rank)
return(op)
}
z=SmartListResponse(1,1)
View(z)
library(Rserve)
Rserve(args = "--no-save")
library(Rserve)
Rserve(args = "--no-save")
library(Rserve)
Rserve(args = "--no-save")
library(Rserve)
Rserve(args = "--no-save")
library(Rserve)
Rserve(args = "--no-save")
source(Job.R)
setwd("C:\\Users\\tmehta\\workspace\\JavaGuiDemo\\scripts")
source("Job.R")
install.packages("dolyr")
install.packages("dplyr")
source("Job.R")
library(RMySQL)
library(dplyr)
library(RNeo4j)
library(igraph)
library(moments)
library(reshape2)
#setwd("C:\\Users\\Hitendra\\Desktop\\R metric Function")
#source('config.R')
mysqlusername='root'
mysqlpasswod="root"
mysqldbname='owen_master'
#mysqldbname='owen'
#mysqlhost="192.168.1.13"
mysqlhost="localhost"
mysqlport=3306
calculate_edge=function(CompanyId){
mydb = dbConnect(MySQL(), user=mysqlusername, password=mysqlpasswod, dbname=mysqldbname, host=mysqlhost, port=mysqlport)
query=paste("call getCompanyConfig(",CompanyId,");",sep = "")
res <- dbSendQuery(mydb,query)
CompanyConfig=fetch(res,-1)
dbDisconnect(mydb)
comp_sql_dbname=CompanyConfig$comp_sql_dbname[1]
comp_sql_server=CompanyConfig$sql_server[1]
comp_sql_user_id=CompanyConfig$sql_user_id[1]
comp_sql_password=CompanyConfig$sql_password[1]
mydb = dbConnect(MySQL(), user=comp_sql_user_id, password=comp_sql_password, dbname=comp_sql_dbname, host=comp_sql_server, port=mysqlport)
query="SELECT * FROM variable where variable_id=9;"
res <- dbSendQuery(mydb,query)
decay=fetch(res,-1)
decay=decay$value[1]
query="SELECT * FROM question where survey_batch_id=1 and que_type=1;"
res <- dbSendQuery(mydb,query)
question=fetch(res,-1)
question$start_date=as.Date(question$start_date,format="%Y-%m-%d")
question$end_date=as.Date(question$end_date,format="%Y-%m-%d")
question=question[question$end_date<Sys.Date(),]
question <- question %>%
group_by(rel_id) %>%
top_n(n = 4, wt = que_id)
query=paste("SELECT * FROM we_response where que_id in (",paste(question$que_id,collapse = ","),")")
res <- dbSendQuery(mydb,query)
we_response=fetch(res,-1)
we_response$response_time=strptime(we_response$response_time,format="%Y-%m-%d  %H:%M:%S")
startdate=min(question$start_date)
query=paste("SELECT * FROM appreciation_response where date(response_time)>'",startdate,"'",sep = "")
res <- dbSendQuery(mydb,query)
appreciation_response=fetch(res,-1)
appreciation_response$response_time=strptime(appreciation_response$response_time,format="%Y-%m-%d  %H:%M:%S")
for  (j in 1:4){
rel_id=j
que_sub=question[question$rel_id==j,]
que_sub=que_sub[order(que_sub$que_id),]
for (k in 1:nrow(que_sub)){
que_id=que_sub$que_id[k]
startdate=que_sub$start_date[k]
appreciation_response$que_id[appreciation_response$rel_id==j &
as.Date(appreciation_response$response_time)>=startdate]=que_id
}
}
appreciation_response=appreciation_response[!is.na(appreciation_response$que_id),]
response=rbind(we_response[,c("emp_id","que_id","response_time","target_emp_id","rel_id","weight")],
appreciation_response[,c("emp_id","que_id","response_time","target_emp_id","rel_id","weight")])
opcal=data.frame(emp_id=as.numeric(),target_emp_id=as.numeric(),
rel_id=as.numeric(),weight=as.numeric())
for ( j in 1:4){
currrel=j
que_rel=question$que_id[question$rel_id==currrel]
que_rel=sort(que_rel,decreasing = TRUE)
decayweight=0
d=1
op=data.frame()
for(x in 1:length(que_rel)){
decayweight=decayweight+decay^(x-1)
currque=que_rel[x]
sub=response[response$rel_id==currrel & response$que_id==currque,]
sub$response_time=as.POSIXct(sub$response_time)
sub <- sub %>%
group_by(emp_id,target_emp_id) %>%
filter(response_time == max(response_time))
sub$weight=sub$weight*d
op=rbind(op,sub)
d=d*decay
}
op1=aggregate(op$weight,by=list(emp_id=op$emp_id,target_emp_id=op$target_emp_id,rel_id=op$rel_id),sum)
names(op1)[4]="weight"
op1$weight=op1$weight/decayweight
opcal=rbind(opcal,op1)
}
TableName=paste("calculated_edge_",format(Sys.Date(), "%Y_%m_%d"),sep = "")
query=paste("CREATE TABLE ",TableName,"(
`emp_from` int(11) NOT NULL,
`emp_to` int(11) NOT NULL,
`rel_id` int(11) NOT NULL,
`weight` double DEFAULT NULL,
KEY `emp_from` (`emp_from`),
KEY `emp_to` (`emp_to`),
CONSTRAINT ",TableName,"_ibfk_1 FOREIGN KEY (`emp_from`) REFERENCES `employee` (`emp_id`),
CONSTRAINT ",TableName,"_ibfk_2 FOREIGN KEY (`emp_to`) REFERENCES `employee` (`emp_id`)
);",sep="")
dbGetQuery(mydb,query)
values <- paste("(",opcal$emp_id,",",opcal$target_emp_id,"," ,opcal$rel_id,",",opcal$weight,")", sep="", collapse=",")
queryinsert <- paste("insert into ",TableName," values ", values,sep = "")
dbGetQuery(mydb,queryinsert)
dbDisconnect(mydb)
return(TRUE)
}
calculate_edge(1)
calculate_edge(1)
mydb = dbConnect(MySQL(), user=mysqlusername, password=mysqlpasswod, dbname=mysqldbname, host=mysqlhost, port=mysqlport)
query=paste("call getCompanyConfig(",CompanyId,");",sep = "")
res <- dbSendQuery(mydb,query)
mydb = dbConnect(MySQL(), user=mysqlusername, password=mysqlpasswod, dbname=mysqldbname, host=mysqlhost, port=mysqlport)
query=paste("call getCompanyConfig(",CompanyId,");",sep = "")
CompanyId=1
query=paste("call getCompanyConfig(",CompanyId,");",sep = "")
res <- dbSendQuery(mydb,query)
CompanyConfig=fetch(res,-1)
dbDisconnect(mydb)
comp_sql_dbname=CompanyConfig$comp_sql_dbname[1]
comp_sql_server=CompanyConfig$sql_server[1]
comp_sql_user_id=CompanyConfig$sql_user_id[1]
comp_sql_password=CompanyConfig$sql_password[1]
mydb = dbConnect(MySQL(), user=comp_sql_user_id, password=comp_sql_password, dbname=comp_sql_dbname, host=comp_sql_server, port=mysqlport)
query="SELECT * FROM variable where variable_id=9;"
res <- dbSendQuery(mydb,query)
decay=fetch(res,-1)
decay=decay$value[1]
query="SELECT * FROM question where survey_batch_id=1 and que_type=1;"
res <- dbSendQuery(mydb,query)
question=fetch(res,-1)
question$start_date=as.Date(question$start_date,format="%Y-%m-%d")
question$end_date=as.Date(question$end_date,format="%Y-%m-%d")
question=question[question$end_date<Sys.Date(),]
question <- question %>%
group_by(rel_id) %>%
top_n(n = 4, wt = que_id)
query=paste("SELECT * FROM we_response where que_id in (",paste(question$que_id,collapse = ","),")")
res <- dbSendQuery(mydb,query)
we_response=fetch(res,-1)
we_response$response_time=strptime(we_response$response_time,format="%Y-%m-%d  %H:%M:%S")
startdate=min(question$start_date)
query=paste("SELECT * FROM appreciation_response where date(response_time)>'",startdate,"'",sep = "")
res <- dbSendQuery(mydb,query)
appreciation_response=fetch(res,-1)
appreciation_response$response_time=strptime(appreciation_response$response_time,format="%Y-%m-%d  %H:%M:%S")
for  (j in 1:4){
rel_id=j
que_sub=question[question$rel_id==j,]
que_sub=que_sub[order(que_sub$que_id),]
for (k in 1:nrow(que_sub)){
que_id=que_sub$que_id[k]
startdate=que_sub$start_date[k]
appreciation_response$que_id[appreciation_response$rel_id==j &
as.Date(appreciation_response$response_time)>=startdate]=que_id
}
}
appreciation_response=appreciation_response[!is.na(appreciation_response$que_id),]
response=rbind(we_response[,c("emp_id","que_id","response_time","target_emp_id","rel_id","weight")],
appreciation_response[,c("emp_id","que_id","response_time","target_emp_id","rel_id","weight")])
opcal=data.frame(emp_id=as.numeric(),target_emp_id=as.numeric(),
rel_id=as.numeric(),weight=as.numeric())
for ( j in 1:4){
currrel=j
que_rel=question$que_id[question$rel_id==currrel]
que_rel=sort(que_rel,decreasing = TRUE)
decayweight=0
d=1
op=data.frame()
for(x in 1:length(que_rel)){
decayweight=decayweight+decay^(x-1)
currque=que_rel[x]
sub=response[response$rel_id==currrel & response$que_id==currque,]
sub$response_time=as.POSIXct(sub$response_time)
sub <- sub %>%
group_by(emp_id,target_emp_id) %>%
filter(response_time == max(response_time))
sub$weight=sub$weight*d
op=rbind(op,sub)
d=d*decay
}
op1=aggregate(op$weight,by=list(emp_id=op$emp_id,target_emp_id=op$target_emp_id,rel_id=op$rel_id),sum)
names(op1)[4]="weight"
op1$weight=op1$weight/decayweight
opcal=rbind(opcal,op1)
}
TableName=paste("calculated_edge_",format(Sys.Date(), "%Y_%m_%d"),sep = "")
query=paste("CREATE TABLE ",TableName,"(
`emp_from` int(11) NOT NULL,
`emp_to` int(11) NOT NULL,
`rel_id` int(11) NOT NULL,
`weight` double DEFAULT NULL,
KEY `emp_from` (`emp_from`),
KEY `emp_to` (`emp_to`),
CONSTRAINT ",TableName,"_ibfk_1 FOREIGN KEY (`emp_from`) REFERENCES `employee` (`emp_id`),
CONSTRAINT ",TableName,"_ibfk_2 FOREIGN KEY (`emp_to`) REFERENCES `employee` (`emp_id`)
);",sep="")
dbGetQuery(mydb,query)
dbGetQuery(mydb,query)
View(opcal)
View(response)
j=1
currrel=j
que_rel=question$que_id[question$rel_id==currrel]
que_rel=sort(que_rel,decreasing = TRUE)
decayweight=0
d=1
op=data.frame()
length(que_rel)
x=1
decayweight=decayweight+decay^(x-1)
currque=que_rel[x]
sub=response[response$rel_id==currrel & response$que_id==currque,]
sub$response_time=as.POSIXct(sub$response_time)
sub <- sub %>%
group_by(emp_id,target_emp_id) %>%
filter(response_time == max(response_time))
sub$weight=sub$weight*d
op=rbind(op,sub)
d=d*decay
x=2
decayweight=decayweight+decay^(x-1)
currque=que_rel[x]
sub=response[response$rel_id==currrel & response$que_id==currque,]
sub$response_time=as.POSIXct(sub$response_time)
sub <- sub %>%
group_by(emp_id,target_emp_id) %>%
filter(response_time == max(response_time))
sub$weight=sub$weight*d
op=rbind(op,sub)
d=d*decay
View(op)
View(sub)
currque=que_rel[x]
sub=response[response$rel_id==currrel & response$que_id==currque,]
sub$response_time=as.POSIXct(sub$response_time)
sub <- sub %>%
group_by(emp_id,target_emp_id) %>%
filter(response_time == max(response_time))
View(sub)
d
decay
query="SELECT * FROM variable where variable_id=9;"
res <- dbSendQuery(mydb,query)
decay=fetch(res,-1)
decay
calcualte_edge(1)
JobAlert(1)
CompanyId
mydb = dbConnect(MySQL(), user=mysqlusername, password=mysqlpasswod, dbname=mysqldbname, host=mysqlhost, port=mysqlport)
query=paste("call getCompanyConfig(",CompanyId,");",sep = "")
res <- dbSendQuery(mydb,query)
CompanyConfig=fetch(res,-1)
dbDisconnect(mydb)
comp_sql_dbname=CompanyConfig$comp_sql_dbname[1]
comp_sql_server=CompanyConfig$sql_server[1]
comp_sql_user_id=CompanyConfig$sql_user_id[1]
comp_sql_password=CompanyConfig$sql_password[1]
mydb = dbConnect(MySQL(), user=comp_sql_user_id, password=comp_sql_password, dbname=comp_sql_dbname, host=comp_sql_server, port=mysqlport)
query="select * from team_metric_value"
res <- dbSendQuery(mydb,query)
team_metric_value<- fetch(res,-1)
query="select * from employee"
res <- dbSendQuery(mydb,query)
employee<- fetch(res,-1)
query=paste("Select * from individual_metric_value where metric_id=3
order by metric_val_id desc Limit ",
nrow(employee),sep = "")
res <- dbSendQuery(mydb,query)
retention_ind <- fetch(res,-1)
View(retention_ind)
query=paste("Select * from individual_metric_value where metric_id=5
order by metric_val_id desc Limit ",
nrow(employee),sep = "")
res <- dbSendQuery(mydb,query)
sentiment_ind <- fetch(res,-1)
View(sentiment_ind)
team_metric_value$date=as.Date(team_metric_value$calc_time,format="%Y-%m-%d")
team_metric_value=team_metric_value[,c("cube_id","metric_id","metric_value","date")]
latest_date=max(team_metric_value$date)
latest_date
d1=dcast(team_metric_value, cube_id+metric_id~date, value.var="metric_value")
query="SELECT * FROM variable;"
res <- dbSendQuery(mydb,query)
variable=fetch(res,-1)
variable
Threshold=variable$value[variable$variable_id==10]
Threshold
d1$delta_n=d1[,ncol(d1)]-d1[,ncol(d1)-1]
if (ncol(d1)>=7){
d1$delta_n_1=d1[,ncol(d1)-2]-d1[,ncol(d1)-3]
d1$delta_n_2=d1[,ncol(d1)-4]-d1[,ncol(d1)-5]
d1$a1=ifelse(d1$delta_n<=(Threshold*-1),1,0)
d1$a2=ifelse(d1$delta_n<0 & d1$delta_n_1<0 & d1$delta_n_2<0,1,0)
d1$a=ifelse(d1$a1==1,1,ifelse(d1$a2==1,1,0))
dalert=d1[d1$a==1,]
dalert$delta=ifelse(dalert$a1==0 & dalert$a2==1,dalert$delta_n+dalert$delta_n_1+dalert$delta_n_2,dalert$delta_n)
}else{
d1$a1=ifelse(d1$delta_n<=(Threshold*-1),1,0)
dalert=d1[d1$a1==1,]
dalert$delta=dalert$delta_n
}
nrow(dalert)
View(dalert)
if (nrow(dalert)>0){
for (i in 1:nrow(dalert)){
# insert alert and get alert_id
metric_id=dalert$metric_id[i]
cube_id=dalert$cube_id[i]
score=dalert[i,as.character(latest_date)]
delta_score=dalert$delta[i]
people_count=0
currtime=format(Sys.time(), "%Y-%m-%d %H:%M:%S")
status="Inactive"
if(metric_id==8){#Retention
emp_id_cube=employee$emp_id[employee$cube_id==cube_id]
retention <-retention_ind[retention_ind$emp_id %in% emp_id_cube,]
#to find people at risk based on Threshold
PeopleAtAlert=retention$emp_id[retention$metric_value<=variable$value[variable$variable_name=="Metric8RiskThreshold"]]
people_count=length(PeopleAtAlert)
}
if(metric_id==10){#Sentiment
emp_id_cube=employee$emp_id[employee$cube_id==cube_id]
sentiment <-sentiment_ind[sentiment_ind$emp_id %in% emp_id_cube,]
#to find people at risk based on Threshold
PeopleAtAlert=sentiment$emp_id[sentiment$metric_value<=variable$value[variable$variable_name=="AlertSentimentThreshold"]]
people_count=length(PeopleAtAlert)
#insert  people
}
dbBegin(mydb)
query=paste("insert into alert (cube_id,metric_id,score,delta_score,people_count,alert_time,status)
values (",cube_id,",",metric_id,",",score,",",delta_score,",",people_count,",'",currtime,"','",status,"');",sep="")
dbGetQuery(mydb,query)
if (people_count>0){
query = "SELECT LAST_INSERT_ID();"
res <- dbSendQuery(mydb,query)
alert_id<- fetch(res,-1)
alert_id=alert_id[1,1]
#insert  people
values <- paste("(",alert_id,",",PeopleAtAlert,")", sep="", collapse=",")
queryinsert <- paste("insert into alert_people (alert_id,emp_id) values ", values)
dbGetQuery(mydb,queryinsert)
}
dbCommit(mydb)
}
}
i=1
metric_id=dalert$metric_id[i]
cube_id=dalert$cube_id[i]
score=dalert[i,as.character(latest_date)]
delta_score=dalert$delta[i]
people_count=0
currtime=format(Sys.time(), "%Y-%m-%d %H:%M:%S")
status="Inactive"
metric_id
dbBegin(mydb)
query=paste("insert into alert (cube_id,metric_id,score,delta_score,people_count,alert_time,status)
values (",cube_id,",",metric_id,",",score,",",delta_score,",",people_count,",'",currtime,"','",status,"');",sep="")
dbGetQuery(mydb,query)
query
library(Rserve)
Rserve()
